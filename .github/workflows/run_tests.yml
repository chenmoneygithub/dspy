name: Lint, Test, and Build

on:
  push:
    branches:
      - main
  pull_request:
    types: [opened, synchronize, reopened]

jobs:
  fix:
    name: Check Ruff Fix
    runs-on: ubuntu-latest
    permissions:
      contents: write
      pull-requests: write
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
      - name: Ruff Fix Attempt
        id: ruff_fix
        uses: chartboost/ruff-action@v1
        with:
          args: check --fix-only --diff --exit-non-zero-on-fix
        continue-on-error: true
      - name: Fail Workflow if Ruff Fix Failed
        if: steps.ruff_fix.outcome == 'failure'
        run: |
          echo "Ruff fix failed, failing the workflow."
          echo "Please run 'ruff check . --fix-only' locally and push the changes."
          exit 1

  test:
    name: Run Tests
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ["3.11"]
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}
      - name: Install Deno
        run: |
          curl -fsSL https://deno.land/install.sh | sh
          echo "Deno installed"

      - name: Add Deno to PATH
        run: echo "${HOME}/.deno/bin" >> $GITHUB_PATH

      - name: Verify Deno installation
        run: deno --version

      - name: Cache UV dependencies
        uses: actions/cache@v3
        with:
          path: ~/.cache/uv
          key: uv-${{ runner.os }}-${{ hashFiles('**/pyproject.toml', '**/uv.lock') }}
          restore-keys: |
            uv-${{ runner.os }}-

      - name: Install UV
        run: pip install uv

      - name: Create virtual environment
        run: uv venv --python=${{ matrix.python-version }} .venv

      - name: Install dependencies
        run: uv sync --dev -p .venv

      - name: Run lint with tests
        uses: chartboost/ruff-action@v1
        with:
          args: check --fix-only

      - name: Run tests with pytest
        run: uv run -p .venv pytest tests/

  build_package:
    name: Build Package
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ["3.11"]
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}

      - name: Cache UV dependencies
        uses: actions/cache@v3
        with:
          path: ~/.cache/uv
          key: uv-${{ runner.os }}-${{ hashFiles('**/pyproject.toml', '**/uv.lock') }}
          restore-keys: |
            uv-${{ runner.os }}-

      - name: Install UV
        run: pip install uv

      - name: Create virtual environment
        run: uv venv --python=${{ matrix.python-version }} .venv

      - name: Install dependencies
        run: uv sync --dev -p .venv

      - name: Build
        run: uv run -p .venv python -m build

      - name: Install built package
        run: uv pip install dist/*.whl -p .venv

      - name: Test import dspy
        run: uv run -p .venv python -c "import dspy"
